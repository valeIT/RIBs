buildscript {
    dependencies {
        classpath deps.build.intellijPlugin
    }
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "org.jetbrains.intellij"
apply plugin: "org.jetbrains.kotlin.jvm"

group "com.uber.rib"

repositories {
    mavenLocal()
}

dependencies {
    implementation deps.apt.androidApi
    implementation deps.build.commonsLang
    implementation deps.external.ddms
    implementation deps.external.guavaAndroid
    implementation deps.androidx.annotations

    testCompile(project(":libraries:rib-base")) {
        transitive = false
    }
    compileOnly(project(path: ":libraries:rib-android", configuration: 'default')) {
        transitive = false
    }

    testCompile(project(":libraries:rib-test")) {
        transitive = false
    }
    testCompile(project(":libraries:rib-compiler-app")) {
        transitive = false
    }
    testCompile(project(":libraries:rib-compiler-test")) {
        transitive = false
    }
    testImplementation deps.apt.daggerCompiler
    testImplementation deps.apt.javaxInject
    testImplementation deps.external.dagger
    testImplementation deps.uber.autodispose
    testImplementation deps.uber.autodisposeLifecycle
    testImplementation deps.test.truth
    testImplementation deps.test.compileTesting
    testImplementation deps.test.mockito
}

// Determines if the machine has Maven credentials.
def hasMavenCredentials() {
    return ext.mavenUser && ext.mavenPassword
}

// Determines if it is a release build.
def isReleaseBuild() {
    return System.env.ENABLE_RELEASE_BUILD.equals("true")
}

ext.pluginXml = new XmlSlurper().parse(file("src/main/resources/META-INF/plugin.xml"))
version = pluginXml.version

intellij {
    plugins = ['java', 'Kotlin' ]
    version deps.versions.intellij
    pluginName "UberRIBPresidioPlugin"
    updateSinceUntilBuild false
    sandboxDirectory "${project.gradle.gradleHomeDir}/caches/intellij"
    downloadSources false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

afterEvaluate {
    artifacts {
        archives sourcesJar
        archives project.tasks.getByName("buildPlugin")
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://" + new File(System.getProperty("user.home"), ".m2/repository").absolutePath
            if (isReleaseBuild() && hasMavenCredentials()) {
                repository(url: "${config.build.artifactoryUrl}/${pluginsMavenRepositoryBucket}") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
            }
        }
    }
}
build.dependsOn uploadArchives
